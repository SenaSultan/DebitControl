//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DebitControl.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DebitControlEntities : DbContext
    {
        public DebitControlEntities()
            : base("name=DebitControlEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Administrator> Administrator { get; set; }
        public virtual DbSet<Computer> Computer { get; set; }
        public virtual DbSet<DebitComputer> DebitComputer { get; set; }
        public virtual DbSet<DebitDevice> DebitDevice { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Device> Device { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<License> License { get; set; }
        public virtual DbSet<Mail> Mail { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<terminatedLicence> terminatedLicence { get; set; }
        public virtual DbSet<terminatedLicence_Log> terminatedLicence_Log { get; set; }
    
        [DbFunction("DebitControlEntities", "GetActiveComputers")]
        public virtual IQueryable<GetActiveComputers_Result> GetActiveComputers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetActiveComputers_Result>("[DebitControlEntities].[GetActiveComputers]()");
        }
    
        [DbFunction("DebitControlEntities", "GetActiveDebitComputer")]
        public virtual IQueryable<GetActiveDebitComputer_Result> GetActiveDebitComputer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetActiveDebitComputer_Result>("[DebitControlEntities].[GetActiveDebitComputer]()");
        }
    
        [DbFunction("DebitControlEntities", "GetActiveDebitComputerByComputerId")]
        public virtual IQueryable<GetActiveDebitComputerByComputerId_Result> GetActiveDebitComputerByComputerId(Nullable<int> computerId)
        {
            var computerIdParameter = computerId.HasValue ?
                new ObjectParameter("computerId", computerId) :
                new ObjectParameter("computerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetActiveDebitComputerByComputerId_Result>("[DebitControlEntities].[GetActiveDebitComputerByComputerId](@computerId)", computerIdParameter);
        }
    
        [DbFunction("DebitControlEntities", "GetActiveDebitDevice")]
        public virtual IQueryable<GetActiveDebitDevice_Result> GetActiveDebitDevice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetActiveDebitDevice_Result>("[DebitControlEntities].[GetActiveDebitDevice]()");
        }
    
        [DbFunction("DebitControlEntities", "GetActiveDebitDeviceByDeviceId")]
        public virtual IQueryable<GetActiveDebitDeviceByDeviceId_Result> GetActiveDebitDeviceByDeviceId(Nullable<int> deviceId)
        {
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("deviceId", deviceId) :
                new ObjectParameter("deviceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetActiveDebitDeviceByDeviceId_Result>("[DebitControlEntities].[GetActiveDebitDeviceByDeviceId](@deviceId)", deviceIdParameter);
        }
    
        [DbFunction("DebitControlEntities", "GetActiveDevices")]
        public virtual IQueryable<GetActiveDevices_Result> GetActiveDevices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetActiveDevices_Result>("[DebitControlEntities].[GetActiveDevices]()");
        }
    
        [DbFunction("DebitControlEntities", "GetActiveEmployees")]
        public virtual IQueryable<GetActiveEmployees_Result> GetActiveEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetActiveEmployees_Result>("[DebitControlEntities].[GetActiveEmployees]()");
        }
    
        [DbFunction("DebitControlEntities", "GetAllComputerRecords")]
        public virtual IQueryable<GetAllComputerRecords_Result> GetAllComputerRecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllComputerRecords_Result>("[DebitControlEntities].[GetAllComputerRecords]()");
        }
    
        [DbFunction("DebitControlEntities", "GetAllDebitComputerRecords")]
        public virtual IQueryable<GetAllDebitComputerRecords_Result> GetAllDebitComputerRecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllDebitComputerRecords_Result>("[DebitControlEntities].[GetAllDebitComputerRecords]()");
        }
    
        [DbFunction("DebitControlEntities", "GetAllDebitDeviceRecords")]
        public virtual IQueryable<GetAllDebitDeviceRecords_Result> GetAllDebitDeviceRecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllDebitDeviceRecords_Result>("[DebitControlEntities].[GetAllDebitDeviceRecords]()");
        }
    
        [DbFunction("DebitControlEntities", "GetAllDebitDevices")]
        public virtual IQueryable<GetAllDebitDevices_Result> GetAllDebitDevices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllDebitDevices_Result>("[DebitControlEntities].[GetAllDebitDevices]()");
        }
    
        [DbFunction("DebitControlEntities", "GetAllDepartmentRecords")]
        public virtual IQueryable<GetAllDepartmentRecords_Result> GetAllDepartmentRecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllDepartmentRecords_Result>("[DebitControlEntities].[GetAllDepartmentRecords]()");
        }
    
        [DbFunction("DebitControlEntities", "GetAllDeviceRecords")]
        public virtual IQueryable<GetAllDeviceRecords_Result> GetAllDeviceRecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllDeviceRecords_Result>("[DebitControlEntities].[GetAllDeviceRecords]()");
        }
    
        [DbFunction("DebitControlEntities", "GetAllEmployeeRecords")]
        public virtual IQueryable<GetAllEmployeeRecords_Result> GetAllEmployeeRecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllEmployeeRecords_Result>("[DebitControlEntities].[GetAllEmployeeRecords]()");
        }
    
        [DbFunction("DebitControlEntities", "GetAllLicenceRecords")]
        public virtual IQueryable<GetAllLicenceRecords_Result> GetAllLicenceRecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllLicenceRecords_Result>("[DebitControlEntities].[GetAllLicenceRecords]()");
        }
    
        [DbFunction("DebitControlEntities", "GetAllMails")]
        public virtual IQueryable<GetAllMails_Result> GetAllMails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllMails_Result>("[DebitControlEntities].[GetAllMails]()");
        }
    
        [DbFunction("DebitControlEntities", "GetComputerByID")]
        public virtual IQueryable<GetComputerByID_Result> GetComputerByID(Nullable<short> computerId)
        {
            var computerIdParameter = computerId.HasValue ?
                new ObjectParameter("computerId", computerId) :
                new ObjectParameter("computerId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetComputerByID_Result>("[DebitControlEntities].[GetComputerByID](@computerId)", computerIdParameter);
        }
    
        [DbFunction("DebitControlEntities", "GetComputerWithLicence")]
        public virtual IQueryable<GetComputerWithLicence_Result> GetComputerWithLicence()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetComputerWithLicence_Result>("[DebitControlEntities].[GetComputerWithLicence]()");
        }
    
        [DbFunction("DebitControlEntities", "GetDebitComputer")]
        public virtual IQueryable<GetDebitComputer_Result> GetDebitComputer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDebitComputer_Result>("[DebitControlEntities].[GetDebitComputer]()");
        }
    
        [DbFunction("DebitControlEntities", "GetDebitComputerById")]
        public virtual IQueryable<GetDebitComputerById_Result> GetDebitComputerById(Nullable<short> debitComputerId)
        {
            var debitComputerIdParameter = debitComputerId.HasValue ?
                new ObjectParameter("debitComputerId", debitComputerId) :
                new ObjectParameter("debitComputerId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDebitComputerById_Result>("[DebitControlEntities].[GetDebitComputerById](@debitComputerId)", debitComputerIdParameter);
        }
    
        [DbFunction("DebitControlEntities", "GetDebitDevice")]
        public virtual IQueryable<GetDebitDevice_Result> GetDebitDevice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDebitDevice_Result>("[DebitControlEntities].[GetDebitDevice]()");
        }
    
        [DbFunction("DebitControlEntities", "GetDebitDeviceById")]
        public virtual IQueryable<GetDebitDeviceById_Result> GetDebitDeviceById(Nullable<short> debitDeviceId)
        {
            var debitDeviceIdParameter = debitDeviceId.HasValue ?
                new ObjectParameter("debitDeviceId", debitDeviceId) :
                new ObjectParameter("debitDeviceId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDebitDeviceById_Result>("[DebitControlEntities].[GetDebitDeviceById](@debitDeviceId)", debitDeviceIdParameter);
        }
    
        [DbFunction("DebitControlEntities", "GetDepartmentById")]
        public virtual IQueryable<GetDepartmentById_Result> GetDepartmentById(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDepartmentById_Result>("[DebitControlEntities].[GetDepartmentById](@departmentId)", departmentIdParameter);
        }
    
        [DbFunction("DebitControlEntities", "GetDeviceByID")]
        public virtual IQueryable<GetDeviceByID_Result> GetDeviceByID(Nullable<short> deviceId)
        {
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("deviceId", deviceId) :
                new ObjectParameter("deviceId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDeviceByID_Result>("[DebitControlEntities].[GetDeviceByID](@deviceId)", deviceIdParameter);
        }
    
        [DbFunction("DebitControlEntities", "GetEmployeeById")]
        public virtual IQueryable<GetEmployeeById_Result> GetEmployeeById(Nullable<short> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeById_Result>("[DebitControlEntities].[GetEmployeeById](@employeeId)", employeeIdParameter);
        }
    
        [DbFunction("DebitControlEntities", "GetEmployeeData")]
        public virtual IQueryable<GetEmployeeData_Result> GetEmployeeData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeData_Result>("[DebitControlEntities].[GetEmployeeData]()");
        }
    
        [DbFunction("DebitControlEntities", "GetLicenseById")]
        public virtual IQueryable<GetLicenseById_Result> GetLicenseById(Nullable<int> licenceId)
        {
            var licenceIdParameter = licenceId.HasValue ?
                new ObjectParameter("licenceId", licenceId) :
                new ObjectParameter("licenceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLicenseById_Result>("[DebitControlEntities].[GetLicenseById](@licenceId)", licenceIdParameter);
        }
    
        [DbFunction("DebitControlEntities", "GetMailById")]
        public virtual IQueryable<GetMailById_Result> GetMailById(Nullable<short> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMailById_Result>("[DebitControlEntities].[GetMailById](@id)", idParameter);
        }
    
        [DbFunction("DebitControlEntities", "GetTerminatedLicenceById")]
        public virtual IQueryable<GetTerminatedLicenceById_Result> GetTerminatedLicenceById(Nullable<int> licenseId)
        {
            var licenseIdParameter = licenseId.HasValue ?
                new ObjectParameter("licenseId", licenseId) :
                new ObjectParameter("licenseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTerminatedLicenceById_Result>("[DebitControlEntities].[GetTerminatedLicenceById](@licenseId)", licenseIdParameter);
        }
    
        [DbFunction("DebitControlEntities", "GetTerminatedLicences")]
        public virtual IQueryable<GetTerminatedLicences_Result> GetTerminatedLicences()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTerminatedLicences_Result>("[DebitControlEntities].[GetTerminatedLicences]()");
        }
    
        public virtual int AddDepartment(string departmentName, string locationName)
        {
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("departmentName", departmentName) :
                new ObjectParameter("departmentName", typeof(string));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("locationName", locationName) :
                new ObjectParameter("locationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDepartment", departmentNameParameter, locationNameParameter);
        }
    
        public virtual int CreateComputer(string computerBrand, string computerModel, string computerName, string computerSerialNumber, string computerLanMac, string computerWifiMac, string computerWin, string computerOffice, Nullable<short> computerNumber, Nullable<bool> computerUsbStatus, Nullable<short> licenceId)
        {
            var computerBrandParameter = computerBrand != null ?
                new ObjectParameter("computerBrand", computerBrand) :
                new ObjectParameter("computerBrand", typeof(string));
    
            var computerModelParameter = computerModel != null ?
                new ObjectParameter("computerModel", computerModel) :
                new ObjectParameter("computerModel", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("computerName", computerName) :
                new ObjectParameter("computerName", typeof(string));
    
            var computerSerialNumberParameter = computerSerialNumber != null ?
                new ObjectParameter("computerSerialNumber", computerSerialNumber) :
                new ObjectParameter("computerSerialNumber", typeof(string));
    
            var computerLanMacParameter = computerLanMac != null ?
                new ObjectParameter("computerLanMac", computerLanMac) :
                new ObjectParameter("computerLanMac", typeof(string));
    
            var computerWifiMacParameter = computerWifiMac != null ?
                new ObjectParameter("computerWifiMac", computerWifiMac) :
                new ObjectParameter("computerWifiMac", typeof(string));
    
            var computerWinParameter = computerWin != null ?
                new ObjectParameter("computerWin", computerWin) :
                new ObjectParameter("computerWin", typeof(string));
    
            var computerOfficeParameter = computerOffice != null ?
                new ObjectParameter("computerOffice", computerOffice) :
                new ObjectParameter("computerOffice", typeof(string));
    
            var computerNumberParameter = computerNumber.HasValue ?
                new ObjectParameter("computerNumber", computerNumber) :
                new ObjectParameter("computerNumber", typeof(short));
    
            var computerUsbStatusParameter = computerUsbStatus.HasValue ?
                new ObjectParameter("computerUsbStatus", computerUsbStatus) :
                new ObjectParameter("computerUsbStatus", typeof(bool));
    
            var licenceIdParameter = licenceId.HasValue ?
                new ObjectParameter("licenceId", licenceId) :
                new ObjectParameter("licenceId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateComputer", computerBrandParameter, computerModelParameter, computerNameParameter, computerSerialNumberParameter, computerLanMacParameter, computerWifiMacParameter, computerWinParameter, computerOfficeParameter, computerNumberParameter, computerUsbStatusParameter, licenceIdParameter);
        }
    
        public virtual int CreateDebitComputer(Nullable<short> employeeId, Nullable<short> computerId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> finishDate, Nullable<bool> status)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(short));
    
            var computerIdParameter = computerId.HasValue ?
                new ObjectParameter("computerId", computerId) :
                new ObjectParameter("computerId", typeof(short));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var finishDateParameter = finishDate.HasValue ?
                new ObjectParameter("finishDate", finishDate) :
                new ObjectParameter("finishDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateDebitComputer", employeeIdParameter, computerIdParameter, startDateParameter, finishDateParameter, statusParameter);
        }
    
        public virtual int CreateDebitDevice(Nullable<short> employeeId, Nullable<short> deviceId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> finishDate, Nullable<bool> status)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(short));
    
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("deviceId", deviceId) :
                new ObjectParameter("deviceId", typeof(short));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var finishDateParameter = finishDate.HasValue ?
                new ObjectParameter("finishDate", finishDate) :
                new ObjectParameter("finishDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateDebitDevice", employeeIdParameter, deviceIdParameter, startDateParameter, finishDateParameter, statusParameter);
        }
    
        public virtual int CreateDevice(string deviceType, string deviceBrand, string deviceModel, string deviceSerialNumber, Nullable<short> deviceNumber, Nullable<bool> deviceStatus)
        {
            var deviceTypeParameter = deviceType != null ?
                new ObjectParameter("deviceType", deviceType) :
                new ObjectParameter("deviceType", typeof(string));
    
            var deviceBrandParameter = deviceBrand != null ?
                new ObjectParameter("deviceBrand", deviceBrand) :
                new ObjectParameter("deviceBrand", typeof(string));
    
            var deviceModelParameter = deviceModel != null ?
                new ObjectParameter("deviceModel", deviceModel) :
                new ObjectParameter("deviceModel", typeof(string));
    
            var deviceSerialNumberParameter = deviceSerialNumber != null ?
                new ObjectParameter("deviceSerialNumber", deviceSerialNumber) :
                new ObjectParameter("deviceSerialNumber", typeof(string));
    
            var deviceNumberParameter = deviceNumber.HasValue ?
                new ObjectParameter("deviceNumber", deviceNumber) :
                new ObjectParameter("deviceNumber", typeof(short));
    
            var deviceStatusParameter = deviceStatus.HasValue ?
                new ObjectParameter("deviceStatus", deviceStatus) :
                new ObjectParameter("deviceStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateDevice", deviceTypeParameter, deviceBrandParameter, deviceModelParameter, deviceSerialNumberParameter, deviceNumberParameter, deviceStatusParameter);
        }
    
        public virtual int DeleteComputer(Nullable<short> computerId)
        {
            var computerIdParameter = computerId.HasValue ?
                new ObjectParameter("computerId", computerId) :
                new ObjectParameter("computerId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteComputer", computerIdParameter);
        }
    
        public virtual int DeleteDepartment(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDepartment", departmentIdParameter);
        }
    
        public virtual int DeleteDevice(Nullable<short> deviceId)
        {
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("deviceId", deviceId) :
                new ObjectParameter("deviceId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDevice", deviceIdParameter);
        }
    
        public virtual int DeleteLicense(Nullable<int> licenceId)
        {
            var licenceIdParameter = licenceId.HasValue ?
                new ObjectParameter("licenceId", licenceId) :
                new ObjectParameter("licenceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLicense", licenceIdParameter);
        }
    
        public virtual int DeleteTerminatedLicence(Nullable<int> licenseId)
        {
            var licenseIdParameter = licenseId.HasValue ?
                new ObjectParameter("licenseId", licenseId) :
                new ObjectParameter("licenseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTerminatedLicence", licenseIdParameter);
        }
    
        public virtual int DisableDebitComputer(Nullable<short> debitComputerId)
        {
            var debitComputerIdParameter = debitComputerId.HasValue ?
                new ObjectParameter("debitComputerId", debitComputerId) :
                new ObjectParameter("debitComputerId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DisableDebitComputer", debitComputerIdParameter);
        }
    
        public virtual int DisableDebitDevice(Nullable<short> debitDeviceId)
        {
            var debitDeviceIdParameter = debitDeviceId.HasValue ?
                new ObjectParameter("debitDeviceId", debitDeviceId) :
                new ObjectParameter("debitDeviceId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DisableDebitDevice", debitDeviceIdParameter);
        }
    
        public virtual int DisableEmployee(Nullable<short> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DisableEmployee", employeeIdParameter);
        }
    
        public virtual int DisableMail(Nullable<short> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DisableMail", idParameter);
        }
    
        public virtual int InsertDepartment(string departmentName, string locationName, Nullable<bool> departmentStatus)
        {
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("departmentName", departmentName) :
                new ObjectParameter("departmentName", typeof(string));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("locationName", locationName) :
                new ObjectParameter("locationName", typeof(string));
    
            var departmentStatusParameter = departmentStatus.HasValue ?
                new ObjectParameter("departmentStatus", departmentStatus) :
                new ObjectParameter("departmentStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDepartment", departmentNameParameter, locationNameParameter, departmentStatusParameter);
        }
    
        public virtual int InsertEmployee(string newEmployeeName, string newEmployeeSurname, string newEmployeeUsername, Nullable<byte> newDepartmentId, Nullable<short> newMailId)
        {
            var newEmployeeNameParameter = newEmployeeName != null ?
                new ObjectParameter("newEmployeeName", newEmployeeName) :
                new ObjectParameter("newEmployeeName", typeof(string));
    
            var newEmployeeSurnameParameter = newEmployeeSurname != null ?
                new ObjectParameter("newEmployeeSurname", newEmployeeSurname) :
                new ObjectParameter("newEmployeeSurname", typeof(string));
    
            var newEmployeeUsernameParameter = newEmployeeUsername != null ?
                new ObjectParameter("newEmployeeUsername", newEmployeeUsername) :
                new ObjectParameter("newEmployeeUsername", typeof(string));
    
            var newDepartmentIdParameter = newDepartmentId.HasValue ?
                new ObjectParameter("newDepartmentId", newDepartmentId) :
                new ObjectParameter("newDepartmentId", typeof(byte));
    
            var newMailIdParameter = newMailId.HasValue ?
                new ObjectParameter("newMailId", newMailId) :
                new ObjectParameter("newMailId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEmployee", newEmployeeNameParameter, newEmployeeSurnameParameter, newEmployeeUsernameParameter, newDepartmentIdParameter, newMailIdParameter);
        }
    
        public virtual int InsertLicense(string licenceName, string licenceKey, string licenceMail, string licencePassword)
        {
            var licenceNameParameter = licenceName != null ?
                new ObjectParameter("licenceName", licenceName) :
                new ObjectParameter("licenceName", typeof(string));
    
            var licenceKeyParameter = licenceKey != null ?
                new ObjectParameter("licenceKey", licenceKey) :
                new ObjectParameter("licenceKey", typeof(string));
    
            var licenceMailParameter = licenceMail != null ?
                new ObjectParameter("licenceMail", licenceMail) :
                new ObjectParameter("licenceMail", typeof(string));
    
            var licencePasswordParameter = licencePassword != null ?
                new ObjectParameter("licencePassword", licencePassword) :
                new ObjectParameter("licencePassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLicense", licenceNameParameter, licenceKeyParameter, licenceMailParameter, licencePasswordParameter);
        }
    
        public virtual int InsertMail(string name, string password, Nullable<bool> status)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMail", nameParameter, passwordParameter, statusParameter);
        }
    
        public virtual int InsertTerminatedLicence(string licenseName, string obtainedFrom, Nullable<System.DateTime> obtainedDate, string email, string licencepassword, string licenceCode, string issuedPerson, string issuedDepartment, Nullable<short> licenceDuration)
        {
            var licenseNameParameter = licenseName != null ?
                new ObjectParameter("licenseName", licenseName) :
                new ObjectParameter("licenseName", typeof(string));
    
            var obtainedFromParameter = obtainedFrom != null ?
                new ObjectParameter("obtainedFrom", obtainedFrom) :
                new ObjectParameter("obtainedFrom", typeof(string));
    
            var obtainedDateParameter = obtainedDate.HasValue ?
                new ObjectParameter("obtainedDate", obtainedDate) :
                new ObjectParameter("obtainedDate", typeof(System.DateTime));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var licencepasswordParameter = licencepassword != null ?
                new ObjectParameter("licencepassword", licencepassword) :
                new ObjectParameter("licencepassword", typeof(string));
    
            var licenceCodeParameter = licenceCode != null ?
                new ObjectParameter("licenceCode", licenceCode) :
                new ObjectParameter("licenceCode", typeof(string));
    
            var issuedPersonParameter = issuedPerson != null ?
                new ObjectParameter("issuedPerson", issuedPerson) :
                new ObjectParameter("issuedPerson", typeof(string));
    
            var issuedDepartmentParameter = issuedDepartment != null ?
                new ObjectParameter("issuedDepartment", issuedDepartment) :
                new ObjectParameter("issuedDepartment", typeof(string));
    
            var licenceDurationParameter = licenceDuration.HasValue ?
                new ObjectParameter("licenceDuration", licenceDuration) :
                new ObjectParameter("licenceDuration", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTerminatedLicence", licenseNameParameter, obtainedFromParameter, obtainedDateParameter, emailParameter, licencepasswordParameter, licenceCodeParameter, issuedPersonParameter, issuedDepartmentParameter, licenceDurationParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateComputer(Nullable<short> computerId, string computerBrand, string computerModel, string computerName, string computerSerialNumber, string computerLanMac, string computerWifiMac, string computerWin, string computerOffice, Nullable<short> computerNumber, Nullable<bool> computerUsbStatus, Nullable<short> licenceId)
        {
            var computerIdParameter = computerId.HasValue ?
                new ObjectParameter("computerId", computerId) :
                new ObjectParameter("computerId", typeof(short));
    
            var computerBrandParameter = computerBrand != null ?
                new ObjectParameter("computerBrand", computerBrand) :
                new ObjectParameter("computerBrand", typeof(string));
    
            var computerModelParameter = computerModel != null ?
                new ObjectParameter("computerModel", computerModel) :
                new ObjectParameter("computerModel", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("computerName", computerName) :
                new ObjectParameter("computerName", typeof(string));
    
            var computerSerialNumberParameter = computerSerialNumber != null ?
                new ObjectParameter("computerSerialNumber", computerSerialNumber) :
                new ObjectParameter("computerSerialNumber", typeof(string));
    
            var computerLanMacParameter = computerLanMac != null ?
                new ObjectParameter("computerLanMac", computerLanMac) :
                new ObjectParameter("computerLanMac", typeof(string));
    
            var computerWifiMacParameter = computerWifiMac != null ?
                new ObjectParameter("computerWifiMac", computerWifiMac) :
                new ObjectParameter("computerWifiMac", typeof(string));
    
            var computerWinParameter = computerWin != null ?
                new ObjectParameter("computerWin", computerWin) :
                new ObjectParameter("computerWin", typeof(string));
    
            var computerOfficeParameter = computerOffice != null ?
                new ObjectParameter("computerOffice", computerOffice) :
                new ObjectParameter("computerOffice", typeof(string));
    
            var computerNumberParameter = computerNumber.HasValue ?
                new ObjectParameter("computerNumber", computerNumber) :
                new ObjectParameter("computerNumber", typeof(short));
    
            var computerUsbStatusParameter = computerUsbStatus.HasValue ?
                new ObjectParameter("computerUsbStatus", computerUsbStatus) :
                new ObjectParameter("computerUsbStatus", typeof(bool));
    
            var licenceIdParameter = licenceId.HasValue ?
                new ObjectParameter("licenceId", licenceId) :
                new ObjectParameter("licenceId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateComputer", computerIdParameter, computerBrandParameter, computerModelParameter, computerNameParameter, computerSerialNumberParameter, computerLanMacParameter, computerWifiMacParameter, computerWinParameter, computerOfficeParameter, computerNumberParameter, computerUsbStatusParameter, licenceIdParameter);
        }
    
        public virtual int UpdateDebitComputer(Nullable<short> debitComputerId, Nullable<short> employeeId, Nullable<short> computerId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> finishDate, Nullable<bool> status)
        {
            var debitComputerIdParameter = debitComputerId.HasValue ?
                new ObjectParameter("debitComputerId", debitComputerId) :
                new ObjectParameter("debitComputerId", typeof(short));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(short));
    
            var computerIdParameter = computerId.HasValue ?
                new ObjectParameter("computerId", computerId) :
                new ObjectParameter("computerId", typeof(short));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var finishDateParameter = finishDate.HasValue ?
                new ObjectParameter("finishDate", finishDate) :
                new ObjectParameter("finishDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDebitComputer", debitComputerIdParameter, employeeIdParameter, computerIdParameter, startDateParameter, finishDateParameter, statusParameter);
        }
    
        public virtual int UpdateDebitDevice(Nullable<short> debitDeviceId, Nullable<short> employeeId, Nullable<short> deviceId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> finishDate, Nullable<bool> status)
        {
            var debitDeviceIdParameter = debitDeviceId.HasValue ?
                new ObjectParameter("debitDeviceId", debitDeviceId) :
                new ObjectParameter("debitDeviceId", typeof(short));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(short));
    
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("deviceId", deviceId) :
                new ObjectParameter("deviceId", typeof(short));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var finishDateParameter = finishDate.HasValue ?
                new ObjectParameter("finishDate", finishDate) :
                new ObjectParameter("finishDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDebitDevice", debitDeviceIdParameter, employeeIdParameter, deviceIdParameter, startDateParameter, finishDateParameter, statusParameter);
        }
    
        public virtual int UpdateDepartment(Nullable<int> departmentId, string departmentName, string locationName, Nullable<bool> departmentStatus)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("departmentName", departmentName) :
                new ObjectParameter("departmentName", typeof(string));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("locationName", locationName) :
                new ObjectParameter("locationName", typeof(string));
    
            var departmentStatusParameter = departmentStatus.HasValue ?
                new ObjectParameter("departmentStatus", departmentStatus) :
                new ObjectParameter("departmentStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDepartment", departmentIdParameter, departmentNameParameter, locationNameParameter, departmentStatusParameter);
        }
    
        public virtual int UpdateDevice(Nullable<short> deviceId, string deviceType, string deviceBrand, string deviceModel, string deviceSerialNumber, Nullable<short> deviceNumber, Nullable<bool> deviceStatus)
        {
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("deviceId", deviceId) :
                new ObjectParameter("deviceId", typeof(short));
    
            var deviceTypeParameter = deviceType != null ?
                new ObjectParameter("deviceType", deviceType) :
                new ObjectParameter("deviceType", typeof(string));
    
            var deviceBrandParameter = deviceBrand != null ?
                new ObjectParameter("deviceBrand", deviceBrand) :
                new ObjectParameter("deviceBrand", typeof(string));
    
            var deviceModelParameter = deviceModel != null ?
                new ObjectParameter("deviceModel", deviceModel) :
                new ObjectParameter("deviceModel", typeof(string));
    
            var deviceSerialNumberParameter = deviceSerialNumber != null ?
                new ObjectParameter("deviceSerialNumber", deviceSerialNumber) :
                new ObjectParameter("deviceSerialNumber", typeof(string));
    
            var deviceNumberParameter = deviceNumber.HasValue ?
                new ObjectParameter("deviceNumber", deviceNumber) :
                new ObjectParameter("deviceNumber", typeof(short));
    
            var deviceStatusParameter = deviceStatus.HasValue ?
                new ObjectParameter("deviceStatus", deviceStatus) :
                new ObjectParameter("deviceStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDevice", deviceIdParameter, deviceTypeParameter, deviceBrandParameter, deviceModelParameter, deviceSerialNumberParameter, deviceNumberParameter, deviceStatusParameter);
        }
    
        public virtual int UpdateEmployeeById(Nullable<short> employeeId, string newEmployeeName, string newEmployeeSurname, string newEmployeeUsername, Nullable<bool> newEmployeeStatus, Nullable<byte> newDepartmentId, Nullable<short> newMailId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(short));
    
            var newEmployeeNameParameter = newEmployeeName != null ?
                new ObjectParameter("newEmployeeName", newEmployeeName) :
                new ObjectParameter("newEmployeeName", typeof(string));
    
            var newEmployeeSurnameParameter = newEmployeeSurname != null ?
                new ObjectParameter("newEmployeeSurname", newEmployeeSurname) :
                new ObjectParameter("newEmployeeSurname", typeof(string));
    
            var newEmployeeUsernameParameter = newEmployeeUsername != null ?
                new ObjectParameter("newEmployeeUsername", newEmployeeUsername) :
                new ObjectParameter("newEmployeeUsername", typeof(string));
    
            var newEmployeeStatusParameter = newEmployeeStatus.HasValue ?
                new ObjectParameter("newEmployeeStatus", newEmployeeStatus) :
                new ObjectParameter("newEmployeeStatus", typeof(bool));
    
            var newDepartmentIdParameter = newDepartmentId.HasValue ?
                new ObjectParameter("newDepartmentId", newDepartmentId) :
                new ObjectParameter("newDepartmentId", typeof(byte));
    
            var newMailIdParameter = newMailId.HasValue ?
                new ObjectParameter("newMailId", newMailId) :
                new ObjectParameter("newMailId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployeeById", employeeIdParameter, newEmployeeNameParameter, newEmployeeSurnameParameter, newEmployeeUsernameParameter, newEmployeeStatusParameter, newDepartmentIdParameter, newMailIdParameter);
        }
    
        public virtual int UpdateLicenceForComputer(Nullable<short> computerId, Nullable<short> licenceId)
        {
            var computerIdParameter = computerId.HasValue ?
                new ObjectParameter("ComputerId", computerId) :
                new ObjectParameter("ComputerId", typeof(short));
    
            var licenceIdParameter = licenceId.HasValue ?
                new ObjectParameter("LicenceId", licenceId) :
                new ObjectParameter("LicenceId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLicenceForComputer", computerIdParameter, licenceIdParameter);
        }
    
        public virtual int UpdateLicense(Nullable<int> licenceId, string licenceName, string licenceKey, string licenceMail, string licencePassword)
        {
            var licenceIdParameter = licenceId.HasValue ?
                new ObjectParameter("licenceId", licenceId) :
                new ObjectParameter("licenceId", typeof(int));
    
            var licenceNameParameter = licenceName != null ?
                new ObjectParameter("licenceName", licenceName) :
                new ObjectParameter("licenceName", typeof(string));
    
            var licenceKeyParameter = licenceKey != null ?
                new ObjectParameter("licenceKey", licenceKey) :
                new ObjectParameter("licenceKey", typeof(string));
    
            var licenceMailParameter = licenceMail != null ?
                new ObjectParameter("licenceMail", licenceMail) :
                new ObjectParameter("licenceMail", typeof(string));
    
            var licencePasswordParameter = licencePassword != null ?
                new ObjectParameter("licencePassword", licencePassword) :
                new ObjectParameter("licencePassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLicense", licenceIdParameter, licenceNameParameter, licenceKeyParameter, licenceMailParameter, licencePasswordParameter);
        }
    
        public virtual int UpdateMail(Nullable<short> id, string name, string password, Nullable<bool> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMail", idParameter, nameParameter, passwordParameter, statusParameter);
        }
    
        public virtual int UpdateTerminatedLicence(Nullable<int> licenseId, string licenseName, string obtainedFrom, Nullable<System.DateTime> obtainedDate, string email, string licencepassword, string licenceCode, string issuedPerson, string issuedDepartment, Nullable<short> licenceDuration)
        {
            var licenseIdParameter = licenseId.HasValue ?
                new ObjectParameter("licenseId", licenseId) :
                new ObjectParameter("licenseId", typeof(int));
    
            var licenseNameParameter = licenseName != null ?
                new ObjectParameter("licenseName", licenseName) :
                new ObjectParameter("licenseName", typeof(string));
    
            var obtainedFromParameter = obtainedFrom != null ?
                new ObjectParameter("obtainedFrom", obtainedFrom) :
                new ObjectParameter("obtainedFrom", typeof(string));
    
            var obtainedDateParameter = obtainedDate.HasValue ?
                new ObjectParameter("obtainedDate", obtainedDate) :
                new ObjectParameter("obtainedDate", typeof(System.DateTime));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var licencepasswordParameter = licencepassword != null ?
                new ObjectParameter("licencepassword", licencepassword) :
                new ObjectParameter("licencepassword", typeof(string));
    
            var licenceCodeParameter = licenceCode != null ?
                new ObjectParameter("licenceCode", licenceCode) :
                new ObjectParameter("licenceCode", typeof(string));
    
            var issuedPersonParameter = issuedPerson != null ?
                new ObjectParameter("issuedPerson", issuedPerson) :
                new ObjectParameter("issuedPerson", typeof(string));
    
            var issuedDepartmentParameter = issuedDepartment != null ?
                new ObjectParameter("issuedDepartment", issuedDepartment) :
                new ObjectParameter("issuedDepartment", typeof(string));
    
            var licenceDurationParameter = licenceDuration.HasValue ?
                new ObjectParameter("licenceDuration", licenceDuration) :
                new ObjectParameter("licenceDuration", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTerminatedLicence", licenseIdParameter, licenseNameParameter, obtainedFromParameter, obtainedDateParameter, emailParameter, licencepasswordParameter, licenceCodeParameter, issuedPersonParameter, issuedDepartmentParameter, licenceDurationParameter);
        }
    
        public virtual ObjectResult<usp_Login_Result> usp_Login(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Login_Result>("usp_Login", usernameParameter, passwordParameter);
        }
    }
}
